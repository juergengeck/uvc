# Task ID: 20
# Title: Refactor AppModel into a lightweight coordinator after extraction
# Status: pending
# Dependencies: None
# Priority: high
# Description: Refactor AppModel to be a simple coordinator that provides model registry and dependency injection, orchestrates initialization sequence, handles inter-model event coordination, and exposes clean public API for accessing models. Target reducing AppModel from 2186 lines to ~500 lines focused solely on coordination responsibilities.
# Details:
To achieve this task, we need to refactor the existing AppModel to extract its coordination functionality into a lightweight coordinator class. This involves identifying the key properties and methods that are currently handled by AppModel and moving them to the new coordinator class. We will also need to update the AppModel to inject the coordinator instance instead of managing it directly. Additionally, we need to ensure that the coordinator provides a clean public API for accessing models, handles inter-model event coordination, and orchestrates the initialization sequence. Key steps include: 1) Identifying and extracting all coordination-related properties and methods from AppModel, 2) Creating a new Coordinator class that provides model registry and dependency injection, 3) Updating AppModel to inject the Coordinator instance, 4) Implementing inter-model event coordination and initialization sequence management in the Coordinator class. We will also need to update the existing models (SettingsModel, NetworkModel, enhanced ConnectionsModel, AIAssistantModel) to be injected into the coordinator instead of being managed directly by AppModel. This involves refactoring their constructors to accept a coordinator instance and updating their methods to use the coordinator's API. Furthermore, we need to ensure that the coordinator provides a clean public API for accessing models, including methods for registering and retrieving model instances. We will also need to implement event handling mechanisms in the coordinator to handle inter-model events. Finally, we need to update the AppModel to orchestrate the initialization sequence of the models using the coordinator's API.

# Test Strategy:
To verify correct implementation and functionality, we will perform a series of tests, including: 1) Unit testing the Coordinator class to ensure it provides model registry and dependency injection, 2) Integration testing the coordinator with the existing models to ensure inter-model event coordination and initialization sequence management are working correctly, 3) End-to-end testing the public API provided by the coordinator to ensure it is clean and functional. We will also need to verify that the coordinator reduces AppModel from 2186 lines to ~500 lines focused solely on coordination responsibilities.
