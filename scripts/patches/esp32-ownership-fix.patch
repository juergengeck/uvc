--- Fix ESP32 Ownership Issues Patch ---
Apply this patch to one.core/src/system/esp32/esp32-quicvc-project/

1. Fix html_encoding.c to include owner ID in discovery:

--- a/components/attestation/html_encoding.c
+++ b/components/attestation/html_encoding.c
@@ -188,16 +188,18 @@ size_t attestation_create_discovery_html(
     // Build additional tags if needed
     if (is_owned && owner_id && strlen(owner_id) > 0) {
         ESP_LOGI(TAG, "Input owner_id length: %zu, content: %s", strlen(owner_id), owner_id);
         char escaped_owner[65];  // 64 chars + null terminator
         html_escape(escaped_owner, sizeof(escaped_owner), owner_id);
         ESP_LOGI(TAG, "Escaped owner length: %zu, content: %s", strlen(escaped_owner), escaped_owner);
-        // Note: We could add owner ID here for debugging, but for security 
-        // we don't include it in discovery messages
+        // Include owner ID for app to recognize ownership
         snprintf(owner_tags, sizeof(owner_tags),
-            "<meta itemprop=\"silent\" content=\"true\">"
+            "<meta itemprop=\"owner\" content=\"%s\">",
+            escaped_owner
         );
     }
     
     // Generate compact HTML with ownership status
     int written = snprintf(buffer, buffer_size, DISCOVERY_TEMPLATE,
         escaped_id,

2. Add credential provisioning handler in main.c after line 2287:

--- a/main/main.c
+++ b/main/main.c
@@ -2285,7 +2285,106 @@ void unified_service_task(void *pvParameters)
         
         // Process the received packet
-        handle_discovery_packet(rx_buffer, err, &client_addr);
+        // Check service type (first byte)
+        if (err > 0) {
+            uint8_t service_type = rx_buffer[0];
+            ESP_LOGI(TAG, "Service type: %d", service_type);
+            
+            switch (service_type) {
+                case SERVICE_TYPE_DISCOVERY:
+                    // Handle discovery request/response
+                    handle_discovery_message(rx_buffer + 1, err - 1, client_ip, client_port);
+                    break;
+                    
+                case SERVICE_TYPE_CREDENTIALS:
+                    // Handle credential provisioning
+                    handle_credential_provisioning(rx_buffer + 1, err - 1, client_ip, client_port);
+                    break;
+                    
+                case SERVICE_TYPE_LED_CONTROL:
+                    // Handle LED control
+                    handle_led_control_command(rx_buffer + 1, err - 1, client_ip, client_port);
+                    break;
+                    
+                case SERVICE_TYPE_VC_EXCHANGE:
+                    // Handle VC exchange
+                    handle_vc_exchange_message(rx_buffer + 1, err - 1, client_ip, client_port);
+                    break;
+                    
+                case SERVICE_TYPE_ATTESTATION:
+                    // Handle attestation messages from other devices
+                    ESP_LOGI(TAG, "Received attestation from %s:%d", client_ip, client_port);
+                    break;
+                    
+                default:
+                    ESP_LOGW(TAG, "Unknown service type: %d", service_type);
+                    break;
+            }
+        }

3. Add credential provisioning handler function before unified_service_task:

+// Handle credential provisioning (SERVICE_TYPE_CREDENTIALS = 2)
+void handle_credential_provisioning(const char *payload, size_t len, const char *sender_ip, uint16_t sender_port) {
+    ESP_LOGI(TAG, "ðŸ“¥ Credential provisioning from %s:%d", sender_ip, sender_port);
+    
+    cJSON *root = cJSON_Parse(payload);
+    if (!root) {
+        ESP_LOGE(TAG, "Failed to parse credential JSON");
+        return;
+    }
+    
+    const char *type = cJSON_GetStringValue(cJSON_GetObjectItem(root, "type"));
+    if (!type) {
+        cJSON_Delete(root);
+        return;
+    }
+    
+    if (strcmp(type, "provision_device") == 0) {
+        // Handle device provisioning
+        cJSON *credential = cJSON_GetObjectItem(root, "credential");
+        if (!credential) {
+            ESP_LOGE(TAG, "No credential in provision message");
+            cJSON_Delete(root);
+            return;
+        }
+        
+        // Extract issuer (owner ID) - 64 character Person ID
+        const char *issuer = cJSON_GetStringValue(cJSON_GetObjectItem(credential, "issuer"));
+        if (!issuer || strlen(issuer) != 64) {
+            ESP_LOGE(TAG, "Invalid issuer (owner ID): %s", issuer ? issuer : "null");
+            cJSON_Delete(root);
+            return;
+        }
+        
+        // Check if already owned
+        if (has_owner()) {
+            ESP_LOGW(TAG, "Device already owned, rejecting provisioning");
+            // TODO: Send rejection response
+            cJSON_Delete(root);
+            return;
+        }
+        
+        // Store the credential
+        ESP_LOGI(TAG, "âœ… Storing ownership credential from: %s", issuer);
+        store_device_credential(credential);
+        
+        // Update attestation system with ownership
+        attestation_set_ownership(true, issuer);
+        
+        // Clear cache to force reload
+        cached_ownership_checked = false;
+        
+        ESP_LOGI(TAG, "ðŸ”’ Device successfully provisioned by: %s", issuer);
+        
+        // TODO: Send acknowledgment response
+        
+    } else if (strcmp(type, "ownership_remove") == 0) {
+        // Handle ownership removal
+        const char *sender_person_id = cJSON_GetStringValue(cJSON_GetObjectItem(root, "senderPersonId"));
+        if (sender_person_id && strcmp(sender_person_id, get_cached_owner_id()) == 0) {
+            ESP_LOGI(TAG, "âœ… Ownership removal authorized");
+            clear_device_credential();
+            attestation_set_ownership(false, NULL);
+            cached_ownership_checked = false;
+        }
+    }
+    
+    cJSON_Delete(root);
+}

4. Fix the ownership check functions to properly read the stored credential:

The ESP32 needs to:
- Store the full 64-character owner Person ID when provisioned
- Include this owner ID in the HTML discovery broadcasts
- Check ownership before processing LED commands
- Clear ownership when requested by the owner

Key functions to verify/fix:
- store_device_credential() - Must store the issuer as owner_id
- get_cached_owner_id() - Must return the 64-char Person ID
- has_owner() - Must check if owner_id is stored
- clear_device_credential() - Must clear stored ownership